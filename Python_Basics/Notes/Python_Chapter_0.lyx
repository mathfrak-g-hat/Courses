#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{amsfonts}
\usepackage{amsthm}
\usepackage{cite}
\usepackage{url}
\usepackage{pb-diagram}
\newcommand{\superscript}[1]{\ensuremath{^{\textrm{#1}}}}
\newcommand{\subscript}[1]{\ensuremath{_{\textrm{#1}}}}
\urlstyle{same}

\def\CC{\mathbb C}
\def\NN{\mathbb N}
\def\QQ{\mathbb Q}
\def\RR{\mathbb R}
\def\ZZ{\mathbb Z}
\def\g{\mathfrak{g}}
\def\t{\mathfrak{t}}
\def\h{\mathfrak{h}}

\usepackage{enumitem}

\textwidth 15.8cm
\oddsidemargin .4cm
\evensidemargin .4cm
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
theorems-sec
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 2
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
Python, Chapter 0
\end_layout

\begin_layout Author
Ahmed J.
 Zerouali
\end_layout

\begin_layout Abstract
The very basics of Python.
 The notes for more advanced topics (data structures and algorithms, machine
 learning libraries, reinforcement learning, time series analysis etc.) will
 be written directly in Jupyter notebooks.
\end_layout

\begin_layout Standard
\align center
01/24/22
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Procedural programming in Python
\end_layout

\begin_layout Subsection
Variable types and basic manipulations
\end_layout

\begin_layout Subsubsection
Integers
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 As in C++, integers are referred to as 
\begin_inset Quotes eld
\end_inset

int
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 There's a modulo operator called using 
\begin_inset Quotes eld
\end_inset

%
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 In Python, the power operator is 
\begin_inset Quotes eld
\end_inset

**
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> 8 % 3 
\end_layout

\begin_layout Plain Layout
2 
\end_layout

\begin_layout Plain Layout
>>> 2**5 
\end_layout

\begin_layout Plain Layout
32 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Variable assignments
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Python uses Dynamic Typing, i.e.
 we can use a variable as an int and then later as an array of strings.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Useful because saves code-writing time, but can easily lead to bugs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To check the type of a variable, use 
\begin_inset Quotes eld
\end_inset

type()
\begin_inset Quotes erd
\end_inset

.
 For instance:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> var = 2 
\end_layout

\begin_layout Plain Layout
>>> type(var) 
\end_layout

\begin_layout Plain Layout
<class 'int'> 
\end_layout

\begin_layout Plain Layout
>>> x = 2.01 
\end_layout

\begin_layout Plain Layout
>>> type(x) 
\end_layout

\begin_layout Plain Layout
<class 'float'> 
\end_layout

\begin_layout Plain Layout
>>> sentence = "Dynamic Typing is weird..." 
\end_layout

\begin_layout Plain Layout
>>> type(sentence) 
\end_layout

\begin_layout Plain Layout
<class 'str'>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Remark
I'm writing these in the command prompt of Python.exe.
 To clear the screen:
\end_layout

\begin_layout Remark
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
import os; os.system(
\begin_inset Quotes eld
\end_inset

cls
\begin_inset Quotes erd
\end_inset

) # Use 
\begin_inset Quotes eld
\end_inset

cls
\begin_inset Quotes erd
\end_inset

 for Windows, 
\begin_inset Quotes eld
\end_inset

clear
\begin_inset Quotes erd
\end_inset

 for Linux.
\end_layout

\end_inset


\end_layout

\begin_layout Remark
Next, to abort the execution of a script, one usually finds the combinations
 
\begin_inset Quotes eld
\end_inset

Ctrl +C
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Ctrl +D
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Ctrl +Z
\begin_inset Quotes erd
\end_inset

 online.
 For some reason, these do not work on my current machine, and the way to
 abort is 
\begin_inset Quotes eld
\end_inset

Ctrl+Pause/Break
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Strings
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Strings are arrays of characters.
 Using the operator 
\begin_inset Quotes eld
\end_inset

[begin:end:step]
\begin_inset Quotes erd
\end_inset

, one can extract substrings of a given string.
 The first character has position 0, not 1.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> sentence = "Dynamic Typing is weird..."
\end_layout

\begin_layout Plain Layout
>>> type(sentence[0]) 
\end_layout

\begin_layout Plain Layout
<class 'str'>
\end_layout

\begin_layout Plain Layout
>>> sentence[6]
\end_layout

\begin_layout Plain Layout
'c'
\end_layout

\begin_layout Plain Layout
>>> sentence[0:6] 
\end_layout

\begin_layout Plain Layout
'Dynami' 
\end_layout

\begin_layout Plain Layout
>>> sentence[0:7] 
\end_layout

\begin_layout Plain Layout
'Dynamic'
\end_layout

\begin_layout Plain Layout
>>> sentence[::2] 
\end_layout

\begin_layout Plain Layout
'DnmcTpn swid.'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 One can also use reverse indexing:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> sentence[-5] 
\end_layout

\begin_layout Plain Layout
'r' 
\end_layout

\begin_layout Plain Layout
>>> sentence[-8:-1] 
\end_layout

\begin_layout Plain Layout
'weird..' 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 In Python, the length function for strings is 
\begin_inset Quotes eld
\end_inset

len()
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> len(sentence) 
\end_layout

\begin_layout Plain Layout
26
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Line breaks are done using the character 
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

.
 Concatenations can be done using 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

, and (somehow) there's also a multiplication of strings using 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> string_1 = "hello" 
\end_layout

\begin_layout Plain Layout
>>> string_2 = "world" 
\end_layout

\begin_layout Plain Layout
>>> string_3 = string_1 + " " + string_2 
\end_layout

\begin_layout Plain Layout
>>> string_4 = string_1 + "
\backslash
n" + string_2 
\end_layout

\begin_layout Plain Layout
>>> string_5 = 3*(string_3+" ")
\end_layout

\begin_layout Plain Layout
>>> print(string_3) 
\end_layout

\begin_layout Plain Layout
hello world 
\end_layout

\begin_layout Plain Layout
>>> print(string_4) 
\end_layout

\begin_layout Plain Layout
hello 
\end_layout

\begin_layout Plain Layout
world 
\end_layout

\begin_layout Plain Layout
>>> print(string_5) 
\end_layout

\begin_layout Plain Layout
hello world hello world hello world
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The string class comes with several methods, called using 
\begin_inset Quotes eld
\end_inset

myString.method(param)
\begin_inset Quotes erd
\end_inset

.
 To see these methods in notebooks, one types tab.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> string_3.upper() # .upper() for all upper caps, .lower() for all lower
 caps.
\end_layout

\begin_layout Plain Layout
'HELLO WORLD' 
\end_layout

\begin_layout Plain Layout
>>> string_3.split() # Splitting at the space character by default, creates
 a list of strings
\end_layout

\begin_layout Plain Layout
['hello', 'world'] 
\end_layout

\begin_layout Plain Layout
>>> string_3.split("o") # Split at the character 
\begin_inset Quotes eld
\end_inset

o
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout
['hell', ' w', 'rld']
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Print formatting
\end_layout

\begin_layout Standard
I'm skipping the notes of this part for now.
 These are sections 19 and 20 of Portilla's Python bootcamp.
 A notebook for examples is here:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/00-Pyt
hon%20Object%20and%20Data%20Structure%20Basics/03-Print%20Formatting%20with%20St
rings.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Lists
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Lists in Python are arrays of elements that could be of distinct types.
 Many operations (indexing, slicing, concatenation, len()) pertaining to
 strings can be done on lists.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Some examples:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> varString = "This is a string" 
\end_layout

\begin_layout Plain Layout
>>> varFloat = 3.14159265359 
\end_layout

\begin_layout Plain Layout
>>> varInt = 19 
\end_layout

\begin_layout Plain Layout
>>> myList = [varString, varFloat, varInt] 
\end_layout

\begin_layout Plain Layout
>>> print(myList) ['This is a string', 3.14159265359, 19] 
\end_layout

\begin_layout Plain Layout
>>> myList[0] = "Lists are mutable" 
\end_layout

\begin_layout Plain Layout
>>> print(myList) ['Lists are mutable', 3.14159265359, 19]
\end_layout

\begin_layout Plain Layout
>>> list_2 = myList + ["concatenating lists", 43, 8.1] 
\end_layout

\begin_layout Plain Layout
>>> print(list_2) 
\end_layout

\begin_layout Plain Layout
['Lists are mutable', 3.14159265359, 19, 'concatenating lists', 43, 8.1] 
\end_layout

\begin_layout Plain Layout
>>> myList.append(["use append also", 9])
\end_layout

\begin_layout Plain Layout
>>> print(myList) ['Lists are mutable', 3.14159265359, 19, 'can also use
 append', 8, ['use append also', 9]] # .append() seems tricky to use.
 Returns None.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Some useful methods here are .sort() and .reverse().
 These return the 
\begin_inset Quotes eld
\end_inset

None
\begin_inset Quotes erd
\end_inset

 value
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> stringList_0 = ["not", "in", "alphabetical", "order"]; intList_0 = [19,
 -3, 15, 31, 23] 
\end_layout

\begin_layout Plain Layout
>>> stringList_1 = stringList_0; intList_1 = intList_0 
\end_layout

\begin_layout Plain Layout
>>> stringList_1.sort(); print(stringList_1) 
\end_layout

\begin_layout Plain Layout
['alphabetical', 'in', 'not', 'order'] # If contains capital 1st letters,
 these are > lowercaps
\end_layout

\begin_layout Plain Layout
>>> intList_1.sort(); intList_1.reverse(); print(intList_1) 
\end_layout

\begin_layout Plain Layout
[31, 23, 19, 15, -3] 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dictionaries
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Dictionaries are non-ordered 
\begin_inset Quotes eld
\end_inset

arrays
\begin_inset Quotes erd
\end_inset

 of key-value pairs (they call it a 
\begin_inset Quotes eld
\end_inset

mapping
\begin_inset Quotes erd
\end_inset

 in the set-theoretic sense).
 One can access the contents using the keys, but we cannot perform the indexing/
slicing done on lists.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 For now, I will just refer to the notebook: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/00-Pyt
hon%20Object%20and%20Data%20Structure%20Basics/05-Dictionaries.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tuples
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Tuples are very similar to lists, except that: (a) They are immutable;
 (b) They have many less methods available.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Portilla explains that these aren't used very much in practice (for beginners
 at least), and that they mostly become relevant to ensure data/type integrity
 in larger programs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Again, I will just refer to Portilla's notebook for now: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/00-Pyt
hon%20Object%20and%20Data%20Structure%20Basics/06-Tuples.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sets
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Sets are another variation of lists.
 Unlike tuples however, they admit only one representative of each element.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Used much later in Portilla's Python Bootcamp.
 Notebook: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/00-Pyt
hon%20Object%20and%20Data%20Structure%20Basics/07-Sets%20and%20Booleans.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Booleans
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 These are exactly what we would expect: variables taking either 
\begin_inset Quotes eld
\end_inset

True
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

False
\begin_inset Quotes erd
\end_inset

 as values.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Examples:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> x = (8 % 3) 
\end_layout

\begin_layout Plain Layout
>>> y = (x == 2) 
\end_layout

\begin_layout Plain Layout
>>> z = (x == 0) 
\end_layout

\begin_layout Plain Layout
>>> y 
\end_layout

\begin_layout Plain Layout
True 
\end_layout

\begin_layout Plain Layout
>>> z 
\end_layout

\begin_layout Plain Layout
False 
\end_layout

\begin_layout Plain Layout
>>> -1 >2 
\end_layout

\begin_layout Plain Layout
False 
\end_layout

\begin_layout Plain Layout
>>> -1 >-2 
\end_layout

\begin_layout Plain Layout
True 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Input/Output with text files
\end_layout

\begin_layout Standard
As with other languages, managing files has a pretty involved syntax.
 Lecture 28 of Portilla's course covers the following:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Opening and closing a file:
\series default
 Done using the 
\begin_inset Quotes eld
\end_inset

open('fileName.extension')
\begin_inset Quotes erd
\end_inset

 function, which can be assigned to a variable.
 Two types of common mistakes occur here: (a) Either the filename is wrong,
 and Python return errno2; (b) Either the path of the file is wrong.
 More on this below.
 To close the file, one uses the .close() method.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Reading a file:
\series default
 The .read(), .seek(0), and .readlines() methods.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
File paths:
\series default
 The double slashes for Windows, MacOS/Linux format of addresses.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
The 'with' statement:
\series default
 Allows to open a file with various permissions (read/write).
 One doesn't need to close the file when using 
\begin_inset Quotes eld
\end_inset

with
\begin_inset Quotes erd
\end_inset

, and this method is also useful for exceptions handling.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Read/write permissions in Python:
\series default
 The second parameter of 
\begin_inset Quotes eld
\end_inset

open(file_name, mode='x')
\begin_inset Quotes erd
\end_inset

 is the 
\begin_inset Quotes eld
\end_inset

mode
\begin_inset Quotes erd
\end_inset

, taking values 'r' (read), 'w' (write), 'a' (append), 'r+' (read and write)
 and 'w+' (overwrites existing or creates new).
 The 'w' permission over-writes the files, while the 'a' permission adds
 lines to the 
\shape italic
end
\shape default
 of the file.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Writing to a file:
\series default
 Done using the .write(variable) method.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's look at concrete examples now.
 We'll work with an example file 
\begin_inset Quotes eld
\end_inset

IO_Example_0.txt
\begin_inset Quotes erd
\end_inset

 with 5 lines, each saying 
\begin_inset Quotes eld
\end_inset

Example text file line xx
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The first way to open a file is to not use the 
\begin_inset Quotes eld
\end_inset

with
\begin_inset Quotes erd
\end_inset

 statement.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> dirAddress = 'C:
\backslash

\backslash
Folder_Containing_IO_Example_0.txt' 
\end_layout

\begin_layout Plain Layout
>>> txtFileName = 'IO_Example_0.txt'
\end_layout

\begin_layout Plain Layout
>>> myFile = open(dirAddress+'
\backslash

\backslash
'+txtFileName, 'r') 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The .read() method prints out all the contents in one long string.
 The .readlines() method creates a list, each entry being one of the lines
 of the file.
 To reset the file reading pointer at the beginning, one used fileVar.seek(0).
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> myFile.read() 
\end_layout

\begin_layout Plain Layout
'Example text file line 01
\backslash
nExample text file line 02
\backslash
nExample text file line 03
\backslash
nExample text file line 04
\backslash
nExample text file line 05
\backslash
n'
\end_layout

\begin_layout Plain Layout
>>> myFile.read() 
\end_layout

\begin_layout Plain Layout
' ' # Returns 
\begin_inset Quotes eld
\end_inset

None
\begin_inset Quotes erd
\end_inset

, because EOF
\end_layout

\begin_layout Plain Layout
>>> myFile.seek(0) # Sets pointer back to beginning of file
\end_layout

\begin_layout Plain Layout
0
\end_layout

\begin_layout Plain Layout
>>> myFile.readlines() # Returns a list
\end_layout

\begin_layout Plain Layout
['Example text file line 01
\backslash
n', 'Example text file line 02
\backslash
n', 'Example text file line 03
\backslash
n', 'Example text file line 04
\backslash
n', 'Example text file line 05
\backslash
n']
\end_layout

\begin_layout Plain Layout
>>> myFile.close() # Always close after using a file without the 
\begin_inset Quotes eld
\end_inset

with
\begin_inset Quotes erd
\end_inset

 statement
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The second way to open a file uses the 
\begin_inset Quotes eld
\end_inset

with
\begin_inset Quotes erd
\end_inset

 statement, which creates a new block of code that has to be indented.
 In this case, we don't need to close the file, but the instructions in
 the new block need to match the read/write/append mode used at the very
 beginning.
 We'll also use the .write() method:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> with open(dirAddress+'
\backslash

\backslash
IO_Example_1.txt', 'w+') as myFile: # Write mode
\end_layout

\begin_layout Plain Layout
...
 
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

myFile.write('Example of .write() in Python') # The indentation is very important
 here.
\end_layout

\begin_layout Plain Layout
...
 
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

myFile.write('
\backslash
n Will also work with csv and avi files for instance') # Add a second line
\end_layout

\begin_layout Plain Layout
...
 
\end_layout

\begin_layout Plain Layout
29 
\end_layout

\begin_layout Plain Layout
52
\end_layout

\begin_layout Plain Layout
>>> with open(dirAddress+'
\backslash

\backslash
IO_Example_1.txt','r') as myFile: # Read mode
\end_layout

\begin_layout Plain Layout
...
 
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

contents = myFile.readlines() # Create a new variable to keep file contents
 outside
\end_layout

\begin_layout Plain Layout
...
 
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

# current block
\end_layout

\begin_layout Plain Layout
>>> print(contents) 
\end_layout

\begin_layout Plain Layout
['Example of .write() in Python
\backslash
n', ' Will also work with csv and avi files for instance'] 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Comparison operators and Boolean composition
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The comparison operators are 
\begin_inset Quotes eld
\end_inset

==
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

!=
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

>=
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To compose Boolean variables, one uses the statements 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

not
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Python statements
\end_layout

\begin_layout Standard
This is section 5 of Portilla's Python bootcamp.
\end_layout

\begin_layout Subsubsection
If, elif and else
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The basic syntax for the if/elif/else statements is as follows:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
if 
\color red
condition_1
\color inherit
:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
# Set of instructions when condition_1=true.

\color inherit
 
\end_layout

\begin_layout Plain Layout
elif 
\color red
condition_2
\color inherit
:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
# Set of instructions when condition_2=true.
\end_layout

\begin_layout Plain Layout
...
 
\end_layout

\begin_layout Plain Layout
else:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
# Set of instructions when condition_n all false.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the presence of the 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 symbol replacing the C++ 
\begin_inset Quotes eld
\end_inset

{
\begin_inset Quotes eld
\end_inset

 bracket, and keep in mind that the indentation is crucial to Python.
 There is no 
\begin_inset Quotes eld
\end_inset

end
\begin_inset Quotes erd
\end_inset

 statement here (as in Matlab), and it is the indentation that that gives
 the end instruction (as opposed to the 
\begin_inset Quotes eld
\end_inset

}
\begin_inset Quotes erd
\end_inset

 bracket in C++).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Here's a concrete example.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
loc = "Office"
\end_layout

\begin_layout Plain Layout
if (loc == 'Home'): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print('I am at home.
 How can I help you?') 
\end_layout

\begin_layout Plain Layout
elif (loc == 'Office'): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print('I am at currently at the office.
 Could you call me back?') 
\end_layout

\begin_layout Plain Layout
elif (loc == 'Store'): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print('I am doing some shopping right now.') 
\end_layout

\begin_layout Plain Layout
else: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print('I am out right now.
 What
\backslash
's up?')
\end_layout

\begin_layout Plain Layout
>>> I am at currently at the office.
 Could you call me back?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
For loops
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The syntax of a for loop is different from what we are used to.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
for 
\color red
iter_var
\color inherit
 in 
\color green
iterable
\color inherit
:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
# Instructions for each value of iter_var
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note again the presence of colons before the indentation.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 In the syntax above, there is a lot of flexibiliy on the 
\begin_inset Quotes eld
\end_inset

iterable
\begin_inset Quotes erd
\end_inset

's class: It need not be an array of integers as in Matlab or C++, it could
 be a list, a string, a tuple, a dictionary, a range(m,M-1) etc.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 This example will print the first 8 terms of the Fibonacci sequence:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
for i in range(0,7+1): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

if i==0: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

F_i, F_im1, F_im2 = 0,0,0 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

elif i==1: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

F_i =1 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

else:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

F_i = F_im1+F_im2 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print('F_',i,' = ',F_i) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

F_im2 , F_im1 = F_im1, F_i
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The next loop prints every character of 
\begin_inset Quotes eld
\end_inset

Hello world!
\begin_inset Quotes erd
\end_inset

 on a new line:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
for i in 'Hello world!': 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(i)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
While loops
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 As usual, while loops are defined in terms of a Boolean condition.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
while 
\color red
Boolean_Condition
\color inherit
:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
# Instructions 
\end_layout

\begin_layout Plain Layout
else:
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
# Instructions before stopping loop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Addendas
\end_layout

\begin_layout Standard
Some notes on addendas in Portilla's Python Bootcamp
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Sec.
 5, Lecture 36: Introduces the statements 
\begin_inset Quotes eld
\end_inset

break
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

continue
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

pass
\begin_inset Quotes erd
\end_inset

 for loops at the end.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Sec.
 5, Lecture 37: The functions range(); enumerate(); zip(); the 
\begin_inset Quotes eld
\end_inset

in
\begin_inset Quotes erd
\end_inset

 keyword; the min()/max() functions for elements of a list; the built-in
 
\begin_inset Quotes eld
\end_inset

random
\begin_inset Quotes erd
\end_inset

 library.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Sec.
 5, Lecture 37: The input('Message') function for user input.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The argument of this function is the message displayed to the user, and
 input() always takes in a string.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To convert the user input to an integer or a float one uses int(input_string)
 or float(input_string) resp.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
\color blue
Note (22/01/19):
\series default
 More notes for the previous 3 items could be useful.
 Found enumerate() and reversed() in Lerner's book, could be relevant for
 interview questions.
 There also seems to be a bug in input() when called from an external file.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Note from Sec.
 7, Lect.
 61:
\series default
 Never execute a Jupyter cell containing input() twice.
 The kernel waits for an input after the first execution, the second execution
 just erases the prompt of the cell, but now no other cell can be executed.
 In this case the kernel has to be restarted and the previous code re-executed.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Sec.
 5, Lecture 38: Discusses List Comprehension, i.e.
 how to fill lists using loops in a much more compact form, and possibly
 use if/else conditions.
 Admittedly, makes the code harder to understand.
 There's also the possibility to nest loops.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
# Square numbers in range and turn into list 
\end_layout

\begin_layout Plain Layout
>>> lst = [x**2 for x in range(0,11)]
\end_layout

\begin_layout Plain Layout
>>> print(lst)
\end_layout

\begin_layout Plain Layout
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
\end_layout

\begin_layout Plain Layout
# Check for even numbers in a range 
\end_layout

\begin_layout Plain Layout
>>> lst = [x for x in range(11) if x % 2 == 0]
\end_layout

\begin_layout Plain Layout
>>> print(lst)
\end_layout

\begin_layout Plain Layout
[0, 2, 4, 6, 8, 10]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Methods and functions
\end_layout

\begin_layout Subsubsection
Methods
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 By definition, a method is a built-in function associated to a class, and
 is called using objVar.method(arguments).
 In notebooks, one can get the help pop-up by pressing the tab key, and
 in the console, one uses the help() function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Functions
\end_layout

\begin_layout Standard
This part starts at Lecture 43 in Section 5 of the Python Bootcamp, and
 extends with exercises etc.
 to Lecture 58.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The syntax for a function definition is as follows:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color blue
def
\color inherit
 function_name(input_variables):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color green
'''
\end_layout

\begin_layout Plain Layout

\color green
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

Docstring describing the function 
\end_layout

\begin_layout Plain Layout

\color green
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

'''
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
# Function instructions
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
return output_variables
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 By convention in Python, the names of functions are written in lower caps
 with underscores (snake casing).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The triple apostrophes delimit the string describing the function.
 This is called using 
\begin_inset Quotes eld
\end_inset

help(function_name)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Note the return keyword at the end.
 It is not strictly necessary, although it's a good practice to add 
\begin_inset Quotes eld
\end_inset

return None
\begin_inset Quotes erd
\end_inset

 if the function doesn't return values.
 Note that Python exits the function block once it reaches 
\begin_inset Quotes eld
\end_inset

return
\begin_inset Quotes erd
\end_inset

 (no instructions below it are executed).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Typically, if there are several output variables returned by the function,
 one uses a tuple containing these values.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Unlike C/C++: Python does not require function prototypes; one doesn't
 need to specify the classes of input/output variables.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
The 
\begin_inset Quotes eld
\end_inset

*args
\begin_inset Quotes erd
\end_inset

 input:
\series default
 The 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 operator allows one to be flexible on the number of arguments passed to
 a function, without having to pre-define the number of arguments (inputs)
 for function calls.
 
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> def pct5_sum(*args):
\end_layout

\begin_layout Plain Layout
...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

''' Returns 5% of the sum of arguments.'''
\end_layout

\begin_layout Plain Layout
...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return (sum(args)*0.05)
\end_layout

\begin_layout Plain Layout
...
\end_layout

\begin_layout Plain Layout
>>> pct5_sum(50,50)
\end_layout

\begin_layout Plain Layout
5.0 
\end_layout

\begin_layout Plain Layout
>>> pct5_sum(10,20,30,40)
\end_layout

\begin_layout Plain Layout
5.0 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that during runtime, 
\begin_inset Quotes eld
\end_inset

args
\begin_inset Quotes erd
\end_inset

 is stored as a tuple inside the function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
The 
\begin_inset Quotes eld
\end_inset

**kwargs
\begin_inset Quotes erd
\end_inset

 input:
\series default
 The 
\begin_inset Quotes eld
\end_inset

**
\begin_inset Quotes erd
\end_inset

 does the same as 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

, but here we use a dictionary instead of a tuple, hence the kw for 
\begin_inset Quotes eld
\end_inset

key-word
\begin_inset Quotes erd
\end_inset

 arguments.
 Here's an example:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/03-Met
hods%20and%20Functions/07-args%20and%20kwargs.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def myfunc(*args, **kwargs):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

if 'fruit' and 'juice' in kwargs: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f"I like {' and '.join(args)} and my favorite fruit is {kwargs['fruit']}")
 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f"May I have some {kwargs['juice']} juice?") 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

else: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

pass 
\end_layout

\begin_layout Plain Layout
myfunc('eggs','spam',fruit='cherries',juice='orange')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The *args and **kwargs inputs are useful when dealing with libraries (
\series bold
\color blue
Reference?
\series default
\color inherit
).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Map and filter, Lambda Expressions
\end_layout

\begin_layout Standard
In Lecture 55, Portilla discusses the 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 functions, as well as Lambda Expressions.
 The 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

 function works as follows.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Consider some function 
\begin_inset Quotes eld
\end_inset

my_func()
\begin_inset Quotes erd
\end_inset

, and that one wants to apply it to each element of an iterable 
\begin_inset Quotes eld
\end_inset

in_iter
\begin_inset Quotes erd
\end_inset

.
 This can be done using the map function with syntax:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
map(
\color blue
my_func
\color inherit
, 
\color green
in_iter
\color inherit
)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The first argument is the desired function, called without the 
\begin_inset Quotes eld
\end_inset

()
\begin_inset Quotes erd
\end_inset

 at the end, and the iterable could be a list, a tuple, a string etc.
 The 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

 function returns a memory address.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> iter_tuple = (-1,-2,-3,-4,5,6,7) 
\end_layout

\begin_layout Plain Layout
>>> map_out=map(is_even,iter_tuple) # is_even returns True for even integer
\end_layout

\begin_layout Plain Layout
<map object at 0x0000024EB227C610>
\end_layout

\begin_layout Plain Layout
>>> print(list(map_out))
\end_layout

\begin_layout Plain Layout
[False, True, False, True, False, True, False]
\end_layout

\end_inset

We used 
\begin_inset Quotes eld
\end_inset

list()
\begin_inset Quotes erd
\end_inset

 to store/view the outputs of each element of iter_tuple.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next we look at the 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 function
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Suppose now that the function 
\begin_inset Quotes eld
\end_inset

my_func()
\begin_inset Quotes erd
\end_inset

 returns a Boolean only, and 
\begin_inset Quotes eld
\end_inset

in_iter
\begin_inset Quotes erd
\end_inset

 is again an iterable.
 The 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 function returns the elements of 
\begin_inset Quotes eld
\end_inset

in_iter
\begin_inset Quotes erd
\end_inset

 for which 
\begin_inset Quotes eld
\end_inset

my_func()
\begin_inset Quotes erd
\end_inset

 returns true.
 The syntax is as follows:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
filter(
\color blue
my_func
\color inherit
, 
\color green
in_iter
\color inherit
)
\end_layout

\end_inset

and continuing with the previous prompt example:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> iter_tuple = (-1,-2,-3,-4,5,6,7)
\end_layout

\begin_layout Plain Layout
>>> filter_out = filter(is_even, iter_tuple)
\end_layout

\begin_layout Plain Layout
<filter at 0x24eb227c730>
\end_layout

\begin_layout Plain Layout
>>> print(list(filter_out))
\end_layout

\begin_layout Plain Layout
[-2, -4, 6]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Note that both 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 produce iterables.
 With the same function and tuple above:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> for i in map(is_even, iter_tuple): 
\end_layout

\begin_layout Plain Layout
>>> ...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(i)
\end_layout

\begin_layout Plain Layout
False 
\end_layout

\begin_layout Plain Layout
True 
\end_layout

\begin_layout Plain Layout
False 
\end_layout

\begin_layout Plain Layout
True 
\end_layout

\begin_layout Plain Layout
False 
\end_layout

\begin_layout Plain Layout
True 
\end_layout

\begin_layout Plain Layout
False
\end_layout

\begin_layout Plain Layout
>>> for i in filter(is_even, iter_tuple): 
\end_layout

\begin_layout Plain Layout
>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(i)
\end_layout

\begin_layout Plain Layout
-2 
\end_layout

\begin_layout Plain Layout
-4 
\end_layout

\begin_layout Plain Layout
6
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now onto Lambda Expressions, also called anonymous functions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Lambda Expressions are useful in cases where we won't need a fully-developed
 function more than once.
 It is also particularly useful when utilized in conjunction with 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The syntax is as follows:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color blue
lambda
\color inherit
 input_var: 
\color green
# Short set of instructions
\end_layout

\end_inset

For instance, the following lambda expression returns squares of 
\begin_inset Quotes eld
\end_inset

input_var
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> num_sq = lambda in_int: in_int**2
\end_layout

\begin_layout Plain Layout
>>> num_sq(5)
\end_layout

\begin_layout Plain Layout
25
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 A more practical example is the following, where the 
\begin_inset Quotes eld
\end_inset

is_even()
\begin_inset Quotes erd
\end_inset

 example is replaced by a Lambda Expression:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> list(filter(lambda in_int: (in_int%2==0), iter_tuple))
\end_layout

\begin_layout Plain Layout
[-2, -4, 6]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 For the sake of readability of the code, it's better to reserve Lambda
 Expressions for simple tasks and use regular functions otherwise.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Namespace and scope
\end_layout

\begin_layout Standard
This is lecture 56, which explains the hierarchy of variable names in Python.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The first main point is the LEGB rule, which stands for:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[L:]
\end_layout

\end_inset

 Local - Names assigned in any way within a function (def or lambda), and
 not declared global in that function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[E:]
\end_layout

\end_inset

 Enclosing function locals - Names in the local scope of any and all enclosing
 functions (def or lambda), from inner to outer.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[G:]
\end_layout

\end_inset

 Global (module) - Names assigned at the top-level of a module file, or
 declared global in a def within the file.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[B:]
\end_layout

\end_inset

 Built-in (Python) - Names preassigned in the built-in names module : open,
 range, SyntaxError,...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The second point is that for a variable which is globally defined, but
 that one wants to change locally within a function, one uses the keyword
 
\begin_inset Quotes eld
\end_inset

global
\begin_inset Quotes erd
\end_inset

 in the definition of the function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 For examples: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/03-Met
hods%20and%20Functions/06-Nested%20Statements%20and%20Scope.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Functions and decorators
\end_layout

\begin_layout Standard
Discussed in Section 12, Lectures 98-99.
 This is optional for beginners, and it is used a lot in pratice in Web
 Development with Python.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The idea of decorators is to add instructions to an already existing function,
 without actually re-writing the function from scratch and potentially losing
 old work.
 The idea is to be able to toggle new functionalities on and off.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 A first prerequisite here is that one can define functions inside functions
 in Python (but they remain only locally defined), functions can return
 functions, and one can also pass functions as arguments in this language.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 When using functions as variables however, one doesn't add the parentheses
 
\begin_inset Quotes eld
\end_inset

()
\begin_inset Quotes erd
\end_inset

 at the end.
 These are only used for execution.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color olive
# Returning functions
\end_layout

\begin_layout Plain Layout
def hello(name='Jose'):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def 
\color blue
greet()
\color inherit
: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return '
\backslash
t This is inside the greet() function' 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def 
\color red
welcome()
\color inherit
: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return "
\backslash
t This is inside the welcome() function" 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

if name == 'Jose': 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return 
\color blue
greet
\color inherit
 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

else: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return 
\color red
welcome
\end_layout

\begin_layout Plain Layout

\color olive
# Functions as arguments
\end_layout

\begin_layout Plain Layout
def hello(): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return 'Hi Jose!'
\end_layout

\begin_layout Plain Layout

\color blue
def other(func): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print('Other code would go here') 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(func())
\end_layout

\begin_layout Plain Layout
__________________________________________
\end_layout

\begin_layout Plain Layout
>>> 
\color blue
other(hello)
\end_layout

\begin_layout Plain Layout
Other code would go here 
\end_layout

\begin_layout Plain Layout
Hi Jose!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Using the facts above, here is a quick and dirty example of a decorated
 function.
 We want to decorate the function 
\begin_inset Quotes eld
\end_inset

factorial(int)
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def factorial(in_int): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

out_int=1 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

if in_int ==0: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

out_int =1 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

elif (in_int<0): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

out_int =0 print('Error: Argument is negative') 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

else: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

for i in range(1,in_int+1): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

out_int = out_int*i 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return out_int
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 in such a way that it asks the user for an input, say by making 
\begin_inset Quotes eld
\end_inset

factorial2()
\begin_inset Quotes erd
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def aug_factorial(fnc): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def prmpt_fact(): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

in_int = int(input('Enter a positive integer N:
\backslash
n')) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f'N! = {fnc(in_int)}') 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return prmpt_fact
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
factorial2 = aug_factorial(factorial)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Instead of reassigning 
\begin_inset Quotes eld
\end_inset

factorial()
\begin_inset Quotes erd
\end_inset

 or making 
\begin_inset Quotes eld
\end_inset

factorial2()
\begin_inset Quotes erd
\end_inset

 as above, we could write 
\begin_inset Quotes eld
\end_inset

aug_factorial(fnc)
\begin_inset Quotes erd
\end_inset

, and then write:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color blue
@aug_factorial 
\end_layout

\begin_layout Plain Layout
def factorial(in_int): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Same instructions as previously
\end_layout

\begin_layout Plain Layout
_______________________________
\end_layout

\begin_layout Plain Layout
>>> factorial()
\end_layout

\begin_layout Plain Layout
>>> Enter a positive integer N: 
\end_layout

\begin_layout Plain Layout
6 
\end_layout

\begin_layout Plain Layout
N! = 720
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To clarify why they're called 
\begin_inset Quotes eld
\end_inset

decorators
\begin_inset Quotes erd
\end_inset

, think of the original function as a present, and the additional instructions
 as decorations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Link to the Notebook:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/10-Pyt
hon%20Decorators/01-Decorators.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Generator functions
\end_layout

\begin_layout Standard
This is Section 13, Lectures 100-102.
 The main takeaway is the 
\begin_inset Quotes eld
\end_inset

yield
\begin_inset Quotes erd
\end_inset

 statement used instead of 
\begin_inset Quotes eld
\end_inset

return
\begin_inset Quotes erd
\end_inset

 in a generator.
 The two other keywords introduced in this lecture, 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

iter
\begin_inset Quotes erd
\end_inset

, are rarely used however.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To explain a generator in practical terms, we could write the following
 function that stores the 
\begin_inset Formula $n$
\end_inset

 first Fibonacci numbers in a list:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def fibonacci(n): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

a,b =1,1 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

out_lst = [] 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

for i in range(n): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

out_lst.append(b) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

a,b = b, a+b 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return out_lst
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 If 
\begin_inset Formula $n$
\end_inset

 is pretty large for instance, this implementation would not be effective
 in terms of memory management.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 What we could do instead is create a 
\series bold
generator
\series default
, which is a function that gives one value of the sequence instead of storing
 all of the values.
 For the Fibonacci sequence, we could write:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def fibonacci_gen(n): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

a,b =1,1 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

for i in range(n): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
yield b 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

a,b = b, a+b
\end_layout

\begin_layout Plain Layout
_________________________
\end_layout

\begin_layout Plain Layout
>>> g = fibonacci_gen(5)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 Notice that 
\begin_inset Quotes eld
\end_inset

return
\begin_inset Quotes erd
\end_inset

 is replaced by 
\begin_inset Quotes eld
\end_inset

yield
\begin_inset Quotes erd
\end_inset

 in this implementation.
 Instead of completely exiting the function, the execution is paused after
 the 
\begin_inset Quotes eld
\end_inset

yield
\begin_inset Quotes erd
\end_inset

 statement.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To call the next number generated by 
\begin_inset Quotes eld
\end_inset

fibonacci_gen(n)
\begin_inset Quotes erd
\end_inset

, we assign the latter to a variable 
\begin_inset Quotes eld
\end_inset

g
\begin_inset Quotes erd
\end_inset

, and use the keyword 
\begin_inset Quotes eld
\end_inset

next(g)
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> print(f'next(fibonacci_gen(5))={next(g)}') 
\end_layout

\begin_layout Plain Layout
next(fibonacci_gen(5))=1
\end_layout

\begin_layout Plain Layout
>>> print(f'next(fibonacci_gen(5))={next(g)}') 
\end_layout

\begin_layout Plain Layout
next(fibonacci_gen(5))=2
\end_layout

\begin_layout Plain Layout
>>> print(f'next(fibonacci_gen(5))={next(g)}') 
\end_layout

\begin_layout Plain Layout
next(fibonacci_gen(5))=3
\end_layout

\begin_layout Plain Layout
>>> print(f'next(fibonacci_gen(5))={next(g)}') 
\end_layout

\begin_layout Plain Layout
next(fibonacci_gen(5))=5
\end_layout

\begin_layout Plain Layout
>>> print(f'next(fibonacci_gen(5))={next(g)}') 
\end_layout

\begin_layout Plain Layout
next(fibonacci_gen(5))=8
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset

After the 5th call to 
\begin_inset Quotes eld
\end_inset

next(g)
\begin_inset Quotes erd
\end_inset

 we get an error (the function stopped generating).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The last notion introduced in this lecture is the 
\begin_inset Quotes eld
\end_inset

iter
\begin_inset Quotes erd
\end_inset

 keyword.
 Essentially, an 
\begin_inset Quotes eld
\end_inset

iterator
\begin_inset Quotes erd
\end_inset

 for Python is a type of generator over which we iterate (
\series bold
Beware:
\series default
 We used the term iterator for objects over which we could loop, it's not
 the same here).
 For instance, if 
\begin_inset Quotes eld
\end_inset

str_var
\begin_inset Quotes erd
\end_inset

 is a given string, the command 
\begin_inset Quotes eld
\end_inset

next(str_var)
\begin_inset Quotes erd
\end_inset

 will not yield a letter from said string, and would instead return 
\begin_inset Quotes eld
\end_inset

TypeError
\begin_inset Quotes erd
\end_inset

 since 
\begin_inset Quotes eld
\end_inset

str_var
\begin_inset Quotes erd
\end_inset

 isn't an iterable.
 One instead uses 
\begin_inset Quotes eld
\end_inset

next(iter_str_var)
\begin_inset Quotes erd
\end_inset

, where 
\color blue
iter_str_var = iter(str_var)
\color inherit
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Link:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/11-Pyt
hon%20Generators/01-Iterators%20and%20Generators.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Advanced objects and data structures
\end_layout

\begin_layout Standard
This covers Section 20 of the course, Lectures 138 to 144.
\end_layout

\begin_layout Subsection
Useful Python modules
\end_layout

\begin_layout Standard
This subsection is covered in Section 14 of Portilla's course (Lectures
 103-115), entitled 
\begin_inset Quotes eld
\end_inset

Advanced Python modules
\begin_inset Quotes erd
\end_inset

.
 Essentially a series of complementary modules.
\end_layout

\begin_layout Subsubsection
Collections module
\end_layout

\begin_layout Standard
The 
\shape italic
collections
\shape default
 module provides specialized container datatypes, as alternatives to the
 usual ones (
\shape italic
list
\shape default
, 
\shape italic
tuple
\shape default
, 
\shape italic
dict
\shape default
 and 
\shape italic
set
\shape default
).
 From the general documentation at: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://docs.python.org/3/library/collections.html}
\end_layout

\end_inset

, we have the following classes:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
namedtuple()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
factory function for creating tuple subclasses with named fields
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
deque
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
list-like container with fast appends and pops on either end
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ChainMap
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dict-like class for creating a single view of multiple mappings
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Counter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dict subclass for counting hashable objects
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OrderedDict
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dict subclass that remembers the order entries were added
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
defaultdict
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dict subclass that calls a factory function to supply missing values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UserDict
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wrapper around dictionary objects for easier dict subclassing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UserList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wrapper around list objects for easier list subclassing
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UserString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wrapper around string objects for easier string subclassing
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 Let's illustrate with the containers covered in Lecture 104.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
\shape italic
Counters - Counter():
\series default
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 This is a class inherited from 
\shape italic
dict
\shape default
.
 Its general purpose is to count the number of elements in a container,
 which could be a list, a tuple or a string.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 When instantiating a 
\shape italic
Counter()
\shape default
 object, a container is passed as a parameter, and the returned object is
 similar to a dictionary, where the keys are the elements of the container,
 and where the values are the object counts.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Below are examples where the container is a list, a tuple, a string, or
 a sentence.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> import collections 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# Counting elements in a list:
\begin_inset Newline newline
\end_inset

>>> collections.Counter([1,2,2,3,3,3,4,4,4,4])
\end_layout

\begin_layout Plain Layout
Counter({1: 1, 2: 2, 3: 3, 4: 4})
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# Counting elements in a tuple:
\begin_inset Newline newline
\end_inset

>>> collections.Counter((1,1,1,1,2,2,2,3,3,4))
\end_layout

\begin_layout Plain Layout
Counter({1: 4, 2: 3, 3: 2, 4: 1})
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# Counting characters in a string:
\begin_inset Newline newline
\end_inset

>>> collections.Counter("
\backslash
'Tenet
\backslash
'")
\end_layout

\begin_layout Plain Layout
Counter({"'": 2, 'T': 1, 'e': 2, 'n': 1, 't': 1})
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# Counting distinct words in a sentence: 
\end_layout

\begin_layout Plain Layout
>>>collections.Counter( ("I am tomorrow, I am the end".lower()).split())
\end_layout

\begin_layout Plain Layout
Counter({'am': 2, 'end': 1, 'i': 2, 'the': 1, 'tomorrow,': 1})
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# Convert to a dictionary:
\begin_inset Newline newline
\end_inset

>>> dict(collections.Counter("
\backslash
'Tenet
\backslash
'"))
\end_layout

\begin_layout Plain Layout
{"'": 2, 'T': 1, 'e': 2, 'n': 1, 't': 1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Portilla gives a couple of common patterns when using a 
\shape italic
Counter()
\shape default
 object in the notebook of Lecture 104:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/12-Adv
anced%20Python%20Modules/00-Collections-Module.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
\shape italic
Default dictionaries - defaultdict():
\series default
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 When manipulating usual dictionaries, one obtains an error when trying
 to access non-existent keys.
 The 
\shape italic
defaultdict
\shape default
 class allows to create new keys with default values provided by a function.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Portilla uses lambda expressions for the 
\begin_inset Quotes eld
\end_inset

factory
\begin_inset Quotes erd
\end_inset

 function.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
# Create default dictionary.
 Set first 2 keys, and call a 3rd.
\begin_inset Newline newline
\end_inset

>>> def_dict = collections.defaultdict(lambda: "Unassigned")
\begin_inset Newline newline
\end_inset

...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def_dict["Key_1"] = 1
\begin_inset Newline newline
\end_inset

...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def_dict["Key_2"] = 2
\begin_inset Newline newline
\end_inset

...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def_dict["Key_3"]
\begin_inset Newline newline
\end_inset

...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(dict(def_dict))
\end_layout

\begin_layout Plain Layout
{'Key_1': 1, 'Key_2': 2, 'Key_3': 'Unassigned'}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
\shape italic
Named tuples - namedtuple():
\series default
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 There are 2 ways of thinking of named tuples.
 The first way is a tuple for which entries have a 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 on top of an integral index.
 The second way of thinking of them is as objects with attributes corresponding
 to the names.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Here is one of Portilla's examples:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
# Create the Dog namedlist and 2 examples
\begin_inset Newline newline
\end_inset

>>> Dog = collections.namedtuple("Dog", ["Breed", "Age", "Name"]) 
\end_layout

\begin_layout Plain Layout
...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

dog_1 = Dog(Breed = "Collie", Age = 3, Name = "Lassie") #
\begin_inset Newline newline
\end_inset

...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

dog_2 = Dog(Breed = "Pitbull", Age = 2, Name = "Tyson")
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# The attributes/values can be accessed via names or indices:
\end_layout

\begin_layout Plain Layout
>>> dog_1[2]
\end_layout

\begin_layout Plain Layout
'Lassie'
\end_layout

\begin_layout Plain Layout
>>> dog_2.Name
\end_layout

\begin_layout Plain Layout
'Tyson'
\end_layout

\begin_layout Plain Layout
>>> dog_1.Breed
\end_layout

\begin_layout Plain Layout
'Collie'
\end_layout

\begin_layout Plain Layout
>>> dog_2[0]
\end_layout

\begin_layout Plain Layout
'Pitbull'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
OS module, files and folders
\end_layout

\begin_layout Standard
This part follows Lecture 105, covering the shell utilities module and the
 OS module.
 This lecture covers the basics of file manipulation, essentially just a
 couple of commands.
 The documentations can be found at the following links:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 OS: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://docs.python.org/3/library/os.html}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Shutil: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://docs.python.org/3/library/shutil.html}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Portilla's notebook: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/12-Adv
anced%20Python%20Modules/01-Opening-and-Reading-Files-Folders.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For illustration, I'm using a Google Colab notebook online, which is why
 the file/directory paths follow the Unix format.
 The imports are:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> import os
\begin_inset Newline newline
\end_inset

>>> import shutil
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
Contents of a directory:
\series default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
\shape italic
os.listdir(
\begin_inset Quotes eld
\end_inset

dir_path
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
 is the equivalent of 
\shape italic
dir
\shape default
 in the command line.
 The argument is the path of the directory one wishes to explore, and this
 functions outputs a list of strings giving the contents of the folder.
 If no argument is specified, this function returns the contents of the
 pwd.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Some examples:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
# List contents of pwd (colab notebook)
\begin_inset Newline newline
\end_inset

>>> os.listdir()
\begin_inset Newline newline
\end_inset

['.config', '.ipynb_checkpoints', 'test_file.txt', 'sample_data']
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# List contents of 
\begin_inset Quotes eld
\end_inset

sample_data
\begin_inset Quotes erd
\end_inset

 
\begin_inset Newline newline
\end_inset

# -> Pass directory path as arg.
 to os.listdir() 
\begin_inset Newline newline
\end_inset

>>> os.listdir("sample_data")
\end_layout

\begin_layout Plain Layout
['README.md', 
\begin_inset Newline newline
\end_inset

'anscombe.json', 
\begin_inset Newline newline
\end_inset

'california_housing_train.csv', 
\begin_inset Newline newline
\end_inset

'mnist_train_small.csv', 
\begin_inset Newline newline
\end_inset

'california_housing_test.csv', 
\begin_inset Newline newline
\end_inset

'mnist_test.csv']
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
Moving files:
\series default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 This is cut and paste of any OS for files.
 Done using 
\series bold
\shape italic
shutil.move(
\begin_inset Quotes eld
\end_inset

file_path
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

target_dir
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
# Moving files done with .move(),
\end_layout

\begin_layout Plain Layout
# Need admin permissions...
 
\begin_inset Newline newline
\end_inset

>>> shutil.move("test_file.txt", "sample_data")
\end_layout

\begin_layout Plain Layout
# Outputs new filepath:
\end_layout

\begin_layout Plain Layout
'sample_data/test_file.txt'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
Deleting files:
\series default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 There are 4 ways of deleting files in Lecture 105:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Using 
\series bold
\shape italic
os.unlink(
\begin_inset Quotes eld
\end_inset

file_path
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
, which deletes one file only.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Using 
\series bold
\shape italic
os.rmdir(
\begin_inset Quotes eld
\end_inset

dir_path
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
, which deletes only empty folders.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Using 
\series bold
\shape italic
shutil.rmtree(
\begin_inset Quotes eld
\end_inset

dir_path
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
, which deletes a folder and the entirety of its contents
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Using 
\series bold
\shape italic
send2trash(
\begin_inset Quotes eld
\end_inset

file_path
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
, a safer method that sends files to recycle bin for possible later recovery.
 The previous methods are irreversible.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{enumerate}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Here's an example with 
\shape italic
send2trash
\shape default
:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> import send2trash
\begin_inset Newline newline
\end_inset

>>> send2trash.send2trash("sample_data/test_file.txt")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(I don't know where the recycle bin is in Colab).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\series bold
\shape italic
os.walk()
\shape default
:
\series default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Using 
\series bold
\shape italic
os.walk(
\begin_inset Quotes eld
\end_inset

dir_path
\begin_inset Quotes erd
\end_inset

)
\series default
\shape default
 produces a generator 
\shape italic
(folders, subfolders, files)
\shape default
 giving a tree representation of all contents of the argument directory.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 For an example, here is a verbatim script to explore the contents of the
 
\begin_inset Quotes eld
\end_inset

usr/local/etc
\begin_inset Quotes erd
\end_inset

 folder in Colab:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
# First we instantiate the iterable: 
\begin_inset Newline newline
\end_inset

>>> w_usr = os.walk("../usr/local/etc")
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
# To explore the folder, loop over folders, subfolders and files:
\begin_inset Newline newline
\end_inset

>>> for folder, sub_folders, files in w_usr: 
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f"Currently looking at {folder}") 
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print("----------------
\backslash
n") print("The folders are: ")
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

for sub_fold in sub_folders:
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f"
\backslash
t Subfolder: {sub_fold}")
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print("
\backslash
n")
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print("the files are: ")
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

for f in files:
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f"
\backslash
t File: {f}")
\begin_inset Newline newline
\end_inset

>>>...
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print("----------------
\backslash
n")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Datetime module
\end_layout

\begin_layout Subsubsection
Math and Random modules
\end_layout

\begin_layout Subsubsection
Debugger
\end_layout

\begin_layout Subsubsection
Regular expressions
\end_layout

\begin_layout Subsubsection
Timing code execution
\end_layout

\begin_layout Subsubsection
Compressing files
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Object oriented programming in Python
\end_layout

\begin_layout Subsection
Fundamentals of classes and inheritance
\end_layout

\begin_layout Standard
The material below is from Section 8 of Portilla's lectures (68-76).
\end_layout

\begin_layout Subsubsection
Basic syntax
\end_layout

\begin_layout Standard
Declaring a new class in Python follows the syntax below:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color blue
class
\color inherit
 NameOfClass():
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Class object attributes:
\color green
 
\color inherit
Attributes shared by all instances of this class
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
#
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color inherit
Referred to using self.class_obj_attr_i
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

class_obj_attr_1 = val_1
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

class_obj_attr_2 = val_2
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Constructor:
\color green
 
\color inherit
Note double underscores of 
\begin_inset Quotes eld
\end_inset

init
\begin_inset Quotes erd
\end_inset

 and the 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 variable
\end_layout

\begin_layout Plain Layout

\color green
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Optional: 
\color inherit
When instantiated without 
\begin_inset Quotes eld
\end_inset

par_i
\begin_inset Quotes erd
\end_inset

 values, 
\end_layout

\begin_layout Plain Layout

\color green
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# 
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color inherit
the cons'tor assigns 
\begin_inset Quotes eld
\end_inset

par_i_deflt
\begin_inset Quotes erd
\end_inset

 by default
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 __init__(
\color red
self
\color inherit
, par_1=par_1_deflt, par_2=par_2_deflt):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Class attributes defined here
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
self.par_1 = par_1
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
self.par_2 = par_2
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

 
\color olive
# etc.
 ...
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Class methods: 
\color inherit
Note keyword 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 always passed as param
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
## Called using my_obj.method_1()
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 method_1(
\color red
self
\color inherit
):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Method instructions
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
## Called using my_obj.method_2(args)
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 method_2(
\color red
self
\color inherit
, some_args):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Method instructions
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 By convention in Python, class names are written in 
\begin_inset Quotes eld
\end_inset

camel casing
\begin_inset Quotes erd
\end_inset

, i.e.
 no underscores and capitalization.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 keyword represents an instance of the class, and is an implicit variable
 in other object-oriented languages.
 In Python however, it needs to be explicitly passed as parameter, in order
 to connect the attributes/methods to the new class.
 The word 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 is more of a convention, the important thing is to have an explicit instance
 variable passed inside the class.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The attributes of the class are defined in the 
\begin_inset Quotes eld
\end_inset

__init__()
\begin_inset Quotes erd
\end_inset

 block (for 
\begin_inset Quotes eld
\end_inset

initialize
\begin_inset Quotes erd
\end_inset

).
 To create a new instance of a class, one uses parentheses: 
\begin_inset Quotes eld
\end_inset

new_obj = NameOfClass()
\begin_inset Quotes erd
\end_inset

 for default attributes, or 
\begin_inset Quotes eld
\end_inset

NameOfClass(par_1_val,par_2_val)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The syntax to call an attribute is 
\begin_inset Quotes eld
\end_inset

my_object.attribute
\begin_inset Quotes erd
\end_inset

 (no parentheses), and to call a method: 
\begin_inset Quotes eld
\end_inset

my_object.method(params)
\begin_inset Quotes erd
\end_inset

 (parentheses).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Just to emphasize 
\shape italic
class object attributes
\shape default
: These are attributes shared by all instances of the class, which could
 be thought of as class 
\begin_inset Quotes eld
\end_inset

invariants
\begin_inset Quotes erd
\end_inset

.
 Class object attributes are defined 
\series bold
above
\series default
 the 
\begin_inset Quotes eld
\end_inset

def __init__
\begin_inset Quotes erd
\end_inset

 block, and below that, they're always referred to using the 
\begin_inset Quotes eld
\end_inset

self
\begin_inset Quotes erd
\end_inset

 keyword.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Lectures 68-76 do not address the public/private/protected properties.
 For private members one prefixes the names with two underscores, and for
 protected members the prefix is one underscore.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Inheritance and polymorphism
\end_layout

\begin_layout Standard
This part is discussed in Lecture 71.
 The inheritance syntax in Python is much more accessible than that of C++.
 The lectures do not go very deep into the subtleties (e.g.
 constructors of derived class).
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color blue
class
\color inherit
 
\color red
BaseClass
\color inherit
():
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 __init__(
\color red
self
\color inherit
):
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Base Constructor
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Class attributes defined here
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
self.par_1 = par_1
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
self.par_2 = par_2
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

 
\color olive
# etc.
 ...
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 method_1(
\color red
self
\color inherit
): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Base Class method_1
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 method_2(
\color red
self
\color inherit
, some_args):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Base Class method_2
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout

\color olive
# Given the BaseClass above: 
\color inherit
Derived classes are defined as follows
\end_layout

\begin_layout Plain Layout

\color blue
class
\color inherit
 DerivedClass(
\color red
BaseClass
\color inherit
):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# New Constructor.
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 __init__(
\color red
self
\color inherit
):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
BaseClass.__init__()
\color olive
 # Not necessary
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
self.par_1 = par_1
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color red
self.par_2 = par_2
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

 
\color olive
# etc.
 ...
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Methods of derived class
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 method_2(
\color red
self
\color inherit
, some_args): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Derived Class method_2.
 
\color inherit
Overwrites the Base Class method.
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color blue
def
\color inherit
 method_3(
\color red
self
\color inherit
, some_args):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\color olive
# Derived Class method_3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To add attributes to derived classes, one writes them in the new constructor.
 
\color blue
A detail that is unclear to me at the moment is the rôle of 
\begin_inset Quotes eld
\end_inset

BaseClass.__init__()
\begin_inset Quotes erd
\end_inset

 in the constructor of a derived class.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To overwrite a method of the BaseClass, it suffices to use the same method
 in the derived classes and re-implement it.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To make a class virtual, so that its methods are only implemented by derived
 classes, one can raise the following error:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
raise NotImplementedError("Some error message")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Polymorphism seems to work easily in Python.
 
\color blue
See notebook for concrete examples.
 Add more on this topic later?
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Link to notebook:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/05-Obj
ect%20Oriented%20Programming/01-Object%20Oriented%20Programming.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Special methods (overloading)
\end_layout

\begin_layout Standard
This is in Lecture 72.
 Without going into a general discussion using other sources, I'll just
 summarize the given examples.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The motivation examples that Portilla uses are those of 
\begin_inset Quotes eld
\end_inset

len()
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

print()
\begin_inset Quotes erd
\end_inset

, which respectively expect an integer and a string, and which we'd like
 to use on a new class.
 The function 
\begin_inset Quotes eld
\end_inset

len()
\begin_inset Quotes erd
\end_inset

 would just return an error, while 
\begin_inset Quotes eld
\end_inset

print()
\begin_inset Quotes erd
\end_inset

 will return the memory address of the object.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To overload built-in Python functions, one adds a method with double underscore
s 
\begin_inset Quotes eld
\end_inset

__built-in-f'n__()
\begin_inset Quotes erd
\end_inset

 to the class definition.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 To overload 
\begin_inset Quotes eld
\end_inset

print()
\begin_inset Quotes erd
\end_inset

 for example, one implements a string representation of an instance of our
 class by adding the following method:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def __str__(self):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return f'String describing object using {self.attribute}'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Similarly, overloading 
\begin_inset Quotes eld
\end_inset

len()
\begin_inset Quotes erd
\end_inset

 is done by returning an integer attribute:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def __len__(self):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

return self.int_attribute
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 One function that hasn't been discussed previously is 
\begin_inset Quotes eld
\end_inset

del
\begin_inset Quotes erd
\end_inset

, which erases variables from the memory.
 Since it's useful to print a deletion message for debugging, one can use
 the following:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def __del__(self):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(f'An object of class {type(self)} with {self.attribute} has been deleted')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 In Python jargon, these special methods are called 
\begin_inset Quotes eld
\end_inset

magic
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

dunder
\begin_inset Quotes erd
\end_inset

 methods (for double underscores).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Modules and packages
\end_layout

\begin_layout Subsubsection
Summary
\end_layout

\begin_layout Standard

\color blue
This is covered in Lectures 77-79.
 Won't write too much stuff for now.
 The following topics are covered:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Lecture 77:
\series default
 Using pip install in cmd to install Python packages.
 Portilla refers to the PyPI repository online to download/install and get
 the pip command for specific packages (pip comes installed with the Anaconda
 distribution, PyPI stands for 
\begin_inset Quotes eld
\end_inset

Python Package Index
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Lecture 78:
\series default
 How to create one's own Python packages and file handling.
 Modules are *.py scripts called by other *.py scripts.
 A package is a collection of modules.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Indicating that the *.py scripts in a folder constitute a package is done
 by adding a blank file to said folder.
 The empty file has to be 
\series bold
called 
\begin_inset Quotes eld
\end_inset

__init__.py
\begin_inset Quotes erd
\end_inset


\series default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Say there's a function called 
\begin_inset Quotes eld
\end_inset

my_func
\begin_inset Quotes erd
\end_inset

 in a module called 
\begin_inset Quotes eld
\end_inset

myModule.py
\begin_inset Quotes erd
\end_inset

.
 The inclusion command is:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color blue
from
\color inherit
 myModule 
\color blue
import
\color inherit
 my_func
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 For large packages with several sub-packages, one creates a subfolder for
 each subpackage, 
\series bold
each of which
\series default
 should contain a 
\begin_inset Quotes eld
\end_inset

__init__.py
\begin_inset Quotes erd
\end_inset

 script.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 In Lecture 78, Portilla focuses on importing modules, submodules and functions.
 The packages, subpackage and module names are separated by a 
\begin_inset Quotes eld
\end_inset

.
\begin_inset Quotes erd
\end_inset

, so that the syntax is:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color olive
# Module
\end_layout

\begin_layout Plain Layout

\color blue
import
\color inherit
 MainPackage.Module_in_Main_Package 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout

\color olive
# Function in module, called using:
\end_layout

\begin_layout Plain Layout

\color olive
# MainPackage.Module_In_Main_Package.func_in_module()
\end_layout

\begin_layout Plain Layout

\color blue
from
\color inherit
 MainPackage.Module_In_Main_Package 
\color blue
import
\color inherit
 func_in_Module 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout

\color olive
# Submodule,i.e.
 module inside a subpackage:
\end_layout

\begin_layout Plain Layout

\color blue
import
\color inherit
 MainPackage.SubPackage.Module_in_Subpackage
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout

\color olive
# Function in submodule, called using:
\end_layout

\begin_layout Plain Layout

\color olive
# MainPackage.SubPackage.Module_in_Subpackage.func_in_SubModule()
\end_layout

\begin_layout Plain Layout

\color blue
from
\color inherit
 MainPackage.SubPackage.Module_in_Subpackage 
\color blue
import
\color inherit
 func_in_SubModule
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Continuing with the previous example, it is useful in practice to rename
 the functions imported from (sub)modules for more readable code.
 This is done using the 
\begin_inset Quotes eld
\end_inset

as
\begin_inset Quotes erd
\end_inset

 keyword after 
\begin_inset Quotes eld
\end_inset

import
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\color olive
# Function in module, called using func_in_module():
\end_layout

\begin_layout Plain Layout

\color blue
from
\color inherit
 MainPackage.Module_In_Main_Package 
\color blue
import
\color inherit
 func_in_Module 
\color blue
as
\color inherit
 func_in_Module
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout

\color olive
# Function in submodule, called using func_in_SubModule()
\end_layout

\begin_layout Plain Layout

\color blue
from
\color inherit
 MainPackage.SubPackage.Module_in_Subpackage 
\color blue
import
\color inherit
 func_in_SubModule 
\color blue
as
\color inherit
 func_in_SubModule
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Lecture 79:
\series default
 Discusses the built-in variables 
\begin_inset Quotes eld
\end_inset

__name__
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

__main__
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 If a module is executed directly, Python views essentially it as the 
\begin_inset Quotes eld
\end_inset

int main(void)
\begin_inset Quotes erd
\end_inset

 function of C++.
 In this case, we have __name__ = 
\begin_inset Quotes eld
\end_inset

__main__
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 If a module is being imported however, 
\begin_inset Quotes eld
\end_inset

__name__
\begin_inset Quotes erd
\end_inset

 isn't equal to 
\begin_inset Quotes eld
\end_inset

__main__
\begin_inset Quotes erd
\end_inset

, as the main function must be from another script.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Remark
A couple of new tricks I learned along the way.
\end_layout

\begin_layout Remark
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 While working on my example of package, I came accross the analogs of cmd's
 
\begin_inset Quotes eld
\end_inset

dir
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

cd
\begin_inset Quotes erd
\end_inset

 commands in Python.
 Again, these are from the 
\begin_inset Quotes eld
\end_inset

os
\begin_inset Quotes erd
\end_inset

 library.
\end_layout

\begin_layout Remark
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
>>> import os 
\end_layout

\begin_layout Plain Layout
>>> os.getcwd() # Returns current working directory
\end_layout

\begin_layout Plain Layout
'C:
\backslash

\backslash
Program Files
\backslash

\backslash
Python
\backslash

\backslash
Python39' 
\end_layout

\begin_layout Plain Layout
>>> os.chdir('C:
\backslash

\backslash
Users
\backslash

\backslash
Me
\backslash

\backslash
Documents
\backslash

\backslash
Python
\backslash

\backslash
First steps
\backslash

\backslash
ZAJTestPackage') 
\color olive
# Analog of 
\begin_inset Quotes eld
\end_inset

cd
\begin_inset Quotes erd
\end_inset

 in cmd
\end_layout

\begin_layout Plain Layout
>>> os.listdir() 
\color olive
# Analog of 
\begin_inset Quotes eld
\end_inset

dir
\begin_inset Quotes erd
\end_inset

 in cmd
\end_layout

\begin_layout Plain Layout
['TestCountPermute.py', 'TestSubPack1', 'TestSubPack2', '__init__.py', '__pycache_
_'] 
\end_layout

\begin_layout Plain Layout
>>>
\end_layout

\end_inset


\end_layout

\begin_layout Remark
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Another useful feature I found is the possibility of running *.py scripts
 inside Jupyter notebooks, using:
\end_layout

\begin_layout Remark
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
%run myScript.py
\end_layout

\end_inset


\end_layout

\begin_layout Remark
I'm assuming that myScript is in the working directory of the notebook.
\end_layout

\begin_layout Remark
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Errors and exception handling
\end_layout

\begin_layout Subsubsection
Basics
\end_layout

\begin_layout Standard
This is Lecture 80.
 The notebook is here:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://github.com/Pierian-Data/Complete-Python-3-Bootcamp/blob/master/07-Err
ors%20and%20Exception%20Handling/01-Errors%20and%20Exceptions%20Handling.ipynb}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main thing to remember is that there are 3 keywords corresponding to
 blocks of instructions:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
try:
\series default
 Python attempts this block of code, which is fully executed if it doesn't
 lead to any errors.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
except Error_Type:
\series default
 If Error_Type occurs in the 
\begin_inset Quotes eld
\end_inset

try
\begin_inset Quotes erd
\end_inset

 block, this specific exception is raised.
 Note that one can make several of these blocks with the last one starting
 with 
\begin_inset Quotes eld
\end_inset


\series bold
else:
\series default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
finally:
\series default
 The final set of instructions, which is executed regardless of whether
 there's an error or not.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Portilla gives the following example, where a function asks the user for
 a number, and raises an error whenever the input string can't be converted
 to an int.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
def askint(): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

try: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

val = int(input("Please enter an integer: ")) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

except: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print("Looks like you did not enter an integer!") 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

val = int(input("Try again-Please enter an integer: ")) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

finally: 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print("Finally, I executed!") 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

print(val)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Pylint
\end_layout

\begin_layout Standard
The Pylint package checks scripts for styling, names of variables, warnings,
 errors etc.
 It's like the prompt at the bottom of Visual C++, which reports warnings
 and whatnot.
 To install pytlint, one runs the following in cmd:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
pip install pylint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, one asks Pylint to produce a report on a script with the following
 commend in cmd:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
pylint myScript.py
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Unit Test
\end_layout

\begin_layout Standard
Unit Test is a built-in library of Python that allows one to make tests
 for functions.
 In Lecture 85, Portilla gives the example of a function 
\begin_inset Quotes eld
\end_inset

capitalize(text)
\begin_inset Quotes erd
\end_inset

 that should capitalize the first letter of each word in the string 
\begin_inset Quotes eld
\end_inset

text
\begin_inset Quotes erd
\end_inset

.
 The test script contains the following instructions:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
import unittest 
\end_layout

\begin_layout Plain Layout
import cap
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
class TestCap(unittest.TestCase):
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

def test_one_word(self): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

text = 'python' 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

result = cap.cap_text(text) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

self.assertEqual(result, 'Python') 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
def test_multiple_words(self): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

text = 'monty python' 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

result = cap.cap_text(text) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

self.assertEqual(result, 'Monty Python') 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
def test_with_apostrophes(self): 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

text = "monty python's flying circus" 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

result = cap.cap_text(text) 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

self.assertEqual(result, "Monty Python's Flying Circus") 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Plain Layout
if __name__ == '__main__': 
\end_layout

\begin_layout Plain Layout
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

unittest.main()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Might update this subsection if I learn more.
 The strange thing here is that the test cases are defined as inherited
 classes.
\end_layout

\begin_layout Section
Advanced tasks with Python
\end_layout

\begin_layout Subsection
Overview (temp)
\end_layout

\begin_layout Standard
I am writing this on 21/06/14.
 Here are the sections remaining in Portilla's Python course at the moment:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[12]
\end_layout

\end_inset

 Decorators.
 (More on functions)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[13]
\end_layout

\end_inset

 Generators.
 (More on functions)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[14]
\end_layout

\end_inset

 Advanced modules.
 Contains a lot of useful and interesting material, including: OS; Debugger;
 Timing code; Zipping...
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[15]
\end_layout

\end_inset

 Web Scraping.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[16]
\end_layout

\end_inset

 Working with images.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[17]
\end_layout

\end_inset

 Working with PDFs and CSVs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[18]
\end_layout

\end_inset

 Emails.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[20]
\end_layout

\end_inset

 Advanced objects and Data Structures.
 (More on numbers, strings, sets dictionaries and lists).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item[21]
\end_layout

\end_inset

 Intro to Graphic User Interfaces (GUIs).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sections 12, 13, 14 and 20 will be summarized in the 
\begin_inset Quotes eld
\end_inset

Procedural Programming
\begin_inset Quotes erd
\end_inset

 section of these notes.
 The present section of these notes will summarize the 
\begin_inset Quotes eld
\end_inset

actually important
\begin_inset Quotes erd
\end_inset

 tasks for practice, meaning sections 15-18 and section 21.
\end_layout

\begin_layout Subsection
Web scraping
\end_layout

\begin_layout Standard
This is Section 15 of Portilla's Python course, Lectures 116-124.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 Web scraping is the automation of data gathering of website (text, images
 etc.).
 This type of task requires a basic understanding of how webpages are written,
 and how the front-end of a website works.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 A note on permissions for web scraping: Some websites block IP addresses
 when scraping software is detected.
 There is usually some limit on how many times a website admits visits and
 a section on permissions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 One of the limitations of web scraping is that each website is unique,
 and the code should be modified according to which website it is used on.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The front end of a webpage typically consists of 3 types of interlinked
 scripts in the following languages:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 HTML (Hypertext Markup Language): This is the code of the page, it contains
 its basic structure (paragraphs, links to images and other internal pointers).
 It's split into the head and the body.
 The various blocks can be identified by 
\begin_inset Quotes eld
\end_inset

<block> script <
\backslash
block>
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 CSS (Cascading Style Sheets): This language organizes the layout of the
 page (font, size and colors).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 JavaScript: These scripts are for the interactive 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The lectures given in this course barely give an introduction, and efficient
 web scraping would require a better understanding of HTML and CSS.
 More importantly, the lectures do not give a systematic treatment of the
 data structures that Python extracts from HTML code.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Packages and scraping of one webpage
\end_layout

\begin_layout Standard
To practice web scraping, one calls the following packages:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
import 
\color blue
requests
\end_layout

\begin_layout Plain Layout
import 
\color blue
lxml
\color inherit
 
\end_layout

\begin_layout Plain Layout
import 
\color blue
bs4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Requests:
\series default
 This package makes requests to access websites and extract their content.
 Concretely:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
ini_request = requests.get(
\color olive
"https://www.somewebsite.com"
\color inherit
)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 the resulting object is a 
\begin_inset Quotes eld
\end_inset

Response
\begin_inset Quotes erd
\end_inset

 (a class from the requests package), one attribute of which is 
\begin_inset Quotes eld
\end_inset

ini_request.text
\begin_inset Quotes erd
\end_inset

.
 The source HTML is stored in the latter as one string.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 
\series bold
Beautiful Soup (bs4):
\series default
 This package is used to parse the HTML code of the page and to extract
 the data structures it contains.
 The first command one uses from this package is:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
ini_html= bs4.BeautifulSoup(ini_request.text,
\color olive
"lxml"
\color inherit
)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 which converts the string 
\begin_inset Quotes eld
\end_inset

ini_request.text
\begin_inset Quotes erd
\end_inset

 into data structures that Beautiful Soup can process.
 Instead of the argument 
\begin_inset Quotes eld
\end_inset

lxml
\begin_inset Quotes erd
\end_inset

, we could use bs4's built-in HTML parser with 
\begin_inset Quotes eld
\end_inset

html.parser
\begin_inset Quotes erd
\end_inset

, but the lxml library is better optimized for these tasks.
 To view the HTML code of a webpage with proper indentation etc., one uses
 the command:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
print(ini_html.prettify())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset

 and another useful command is to extract all text from the webpage:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
print(ini_html.get_text())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the subsections below, we discuss two sandbox examples from a website
 specifically designed to practice web scraping: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{books.toscrape.com}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{quotes.toscrape.com}
\end_layout

\end_inset

.
 Since I was quite confused by Pierian Data's data extraction process, I
 used some functions from bs4's official documentation page:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\backslash
url{https://www.crummy.com/software/BeautifulSoup/bs4/doc/}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
Notes
\end_layout

\begin_layout Standard
I do not know when I'll write detailed notes for this part.
 I however made two Jupyter notebooks with extensive explanations of the
 scraping process.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The first example uses the 
\begin_inset Quotes eld
\end_inset

find_all()
\begin_inset Quotes erd
\end_inset

 function from bs4, and deals with books on books.toscrape.com (Lectures 121-122).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
item
\end_layout

\end_inset

 The second example uses the 
\begin_inset Quotes eld
\end_inset

select()
\begin_inset Quotes erd
\end_inset

 function from bs4, and deals with quotes on books.toscrape.com, which is
 the assignment of Section 15 (Lectures 123 and 124).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
